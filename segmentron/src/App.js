import logo from './logo.svg';
import './App.css';
import {useState, useEffect} from 'react';
import axios from 'axios';

function Algo(){
  return(
    <>
    </>
  );
}

function Sequence(){
  const default_sequence = "GTCCTAATGACAGTTACCTCTCGCGGGTCAATTTTAAATTGGAGCCTTTCACAAGGATGTATGTAAAGGTTCGGAATCGGGGTTGCGTGACATACACCAAGAGGCTCGAGGCCAGTACATTATGCAATGGCCCACTACGATTGTTTTGATCTGGGAACAGACCAAGTTGGTAGCTGTATATCCCCACGTCTTGAAACTAGATGTGCCCTCGTCGTCAGAAACTCTGATTCACAGCCTATCCCGATGAGCGTCAGTTTGCAGTAGGAACTGGCCGTGGTGAGCATGTTAAAAGTACGCGGCGTGAACAAAGTAGATTCGGGGGAGACTTTGCTAGATTACGAGGCAATAGTTACACTGGGTGGCCACTTCTGCGCCTCGTTTAACAAATGCGGAGGGTCGCCTTCCCTATCGGTCGTGCGACACGCTTAGCCTATCTATAGTGCATACAAAACATAAATGCCTCTATCACCCGTGAAGATGTGCCGCTGCTATTAGCTGGCAAAATGAGGTGAATCTATTACTAGGTATCTCAGTCGGAACATCCTCGTCTTTGTCCCTTTAATAAACCGCATCCGGGACAAATCTCATCACGATGCCGCCCAGGATTCTTGTAGTACCGGCAGATGACTGCGAGCATGCATTTCCGTAGTCAGTCTCCTCGCTCGCCGTGGGTCGGCATAATTGCCCTCTCAAAGCTCCAGATGATGCCATTCGAAGCGAGGTATAGAGAAGCACTGTACGATCTACGCAGCAACCAATGGTAGTGTGCCACAAACATATGAGTTTGCTACTGCGGGTCGGATGCCACATTAAACGTGGTTACCCTTTAATGACCGATCCGAACTCCCTGTCCATGGTGCGAAGGACGTACCTACACGTCTCTGCTCGGGATCCGGCCCCCGTTTGTTGCCCAAGATTGCTCGAGAACATATGTGCCGTCGTGTCTAGAAAGATACAGAGTGAGGACCTCGTCGGATAACTTATGACAAGGACCGTTGATCAGAGTAAGCGCCCGCAGTCAATTTCTAACTTGAACAACGTTGAGTATCAGGTACCCGAGAGGGGCAGCGCTTCATGGGAATACCGCTTGTCGTGTACACAACACTCGACGGTTAACCCTTCGGAAATCGGTCTTTGCCTGGGGCACCAACGACATTTAGTGAACTAGATGAGACCAGTCAGCTCTATTCAGAGACGGTCTTGAAATTAAGCCGTCAATAATGACTAGTTCGGCGGGGGTGGCGCGTCTGCACCAGGTCGAAATGTGTGTGCAGGTACAAGCTCCGACTACAACTTTCGATCTGGATATATGGGGTCCCCGAGGTTGGTTCAGCGGGTCCAAGTGATGAGAACGCTGGACCGCCAGACATACGATTTTATTTTTCGATTTAATCGAAGGAGTCGCGGCCGTGCGAAAGAAAGGTGTTAAGTAACTCTGTGAAACTATTTCTCGAGGATTGCCACTGGGTAAACCACGTTGCGCGCATTACAAGAAGTCCCGGTCCAGATCTAGGACTCGGCCACAAAAACATTCAAAGCGGCACACACAGAGCTGACCAGTGCGACCAAGATGAGATGAACTTCGGTAACGCCGACTAATATTCTCGCATATTCCACTGAGAAATCCAAGTCATATTCTGCAGTCGTTCGGCGCATCGGATGGCGTCCTCCGAATAAAAGTTTGTCATATGGATCAAAGAATCTTTTATGGCCGTCAGATGTAAGTATCCATTCCTATATCCAACAAGTTCGCCTCAATAGATACCGGTGGTAGCCGATTACCGCTACGCTATGGTGCTGCTTCAACGGAAAAGGGGGTTCCGGCCGCGTATACGTGAGTCGGGTTAAGGGAGGTGGCAGGCTAATTAACTATAGCAAATGTGGTTTGCCGTGGGGTAACTATCGATGCTTAATCTAAACCTTTGGTGACCTGCTGTGCGCAATGTCACCGGGTAAGATTGGCCAGATGCATATTTAACGGCCGGGAGAGATGAGTCAACCCCGCGAACAGTCCCTGCTAATGTATCCAGGCGTGAGTAGTTCAGGGTCGATGGCCCATATACTGCGAGGCGTCGGCTGGATCTGTCTGTTCGGGAGCCTATGCAGCAGCATGGATCCCGCGTCACTAATTGTGTCGTATGTTATTATATGTGAACCTGCACCTTTTGACTTCTCAGGCACTCCAATCGTGAAGCGAAACCAAACCTCGGGAGGCGTTAATTGTCCGACCATCCGCGAATGTAGATTCCAATACGAGGCTGGGCAAATATACCATAGCCGCAGGTAGGACCCAGAGATTCCGGGGCTACATTTCGGAAACTGTGCTCGAGTCTAAGCTGCGTTGTGGCTCCAGCGACCCAGGGAAAGTATGCCTAACACAGGCACCAAGTTCCACCCTTCCCGGCATTATCCCCGCCACCCTCTGCACCGCACGTAAACCAGTTCGGTACTACACCCGCGTGTAATTAATTATGCAGGTTAATTAGCGCATTCGCACCATTTAACGTTTTTCCGGAGGGAATGATGGCAGCTGTCTACGAACAATGACTTGGCTGGCAAGCGGACATGGCCCAGTGCAAGAATGACCCTACAGGATTCTCCTCCATGAGGCGACCTTACTCTTGCAGTTCGTCGACCATGCAGACCTTAGTCCGGCCGGTCGGAAGACGAGCTTATTTGCGAAGGCGAACAGAGCGCGAAGTTGTGCTGGACCGCCCGGACATGAAGGAGGGCGGACTATTTGACTAGACACACAAAAGCATATTAGAGATCAAAAAGTCTCAAATCACACAGCACGCGCCACCGTCAATATTCCCCCGGAGGCGTGGTGACCCCAGTCCGCATTATTGTTGGACGTCCAGCAGCCTCTGTCCTTGATATTCCGCGGCTCTTTAAACCAACTTACTCGGGTCTTTCCTAGCTTGACGTGCCTGCTCTTAACCTGCATTACCTTGCCGCTGGGTTCTATTGTCGTATATCGATATTACAATAAAAAAGTTATGTCTTTCTAGACGGGCTACCTAGTACGGCGAACGTAGTATCATTCTTAGCAGTCCTGCGGCTTTTAATAGGCACTTTAACCCGCCAAGATGGATAGCAATTAATTTCAATGCAGGCCGGGCAACCTTAAGAGTTAGTTTTGCACAAAGCAACTAGCCGCTAAAGTTGAATTCGTTCACCAAGATCCAGAAATCACCAAAGGGTTGACTAGCTGGCTTTATCTCTATCGCAAACAGCCCCTATTACAACGGGAGTGTTAGTACGAAGGAGGATTGCCAACTATTTTTGTTGACCAATGGCGACAACCGGAGCCTCGTCCCAAAATATTACCGACACAAGCACGCCAATTAATGCGCGGGGCACCATTAGTTTAAATTGTTTTTTCGTGAGCTGCGGAAAGTTATTTTGCTCCGCCATAAATTTTCGCTTGCTCGGTTTTCGCCAGGCCTGTTGTATTACTACTGCTTACCTTATTGGCCCAGATACTTCCCCAGAATGTGCTTCAATCGCCTTCCCAGTATACGCAAGGGAGGTGTGACCGGGACTAGATCACGTCGATGAAAGGATCACTCCACGCGCCAGCGTACATACGAAGTGATGCTGAACATGGAATCTCGTAGACGGCTCGCGGACAAATCGACCCTGCGCTGTGACGCTGTTAAAGCCATGGCATTTGCAAGGGCCAAGAGGATCTGGATACTTATAGCAGCAGTCGTCTAGTGCAATGAACGTCGTAACTAACTTACGGCTCCGCCTGGGTCACGTAAGATCCAAAATAAGCAGGCTCAGAGGGGTGCGTAAGCAGGGTACTTTTCGAGTGTGTTCAGATCTACCGGCTTGTCAAAATGTCTAAAAGAACTAACACTCCACTCAGATCCGCTGGAAAGTCGTTCTAGAATCGGGACCCTAATCAACTGTCCACGCTATAATCGCTGTGTCTGAAAAACATAAATCTCTTGCGGAAGTAGCTATCCCAATCTCCGAATGTTAGGGTCCACTATCATCGAGCAAATGCTCGAAACACAAGTATTTGTATAATTAGTTACCACTTCTAGACAAAGCCCTGCACACCTCAACATGCCGGCTCCCTGCGGGCGAGCAACCGGAGCGGAACCCGCTTTTAGGCGATAATTTGGGCGAGTTTTGCACAAGATTGGCTGTTTGGTAGCGTCCGACACAAGTAACGTCGCGCATAACGTACACGCCGGAGCTTGTCCATTCAAGCCGGAGGTCCCGGATTCAGAAGGGATCACTCTGATGTCCTAAAAGCTTGTGTTTCGCGAACGGGCTCCAGGCATAAGCCCCTCAGGCCGAACTGAGAAGTTAACTCCGTGTCCATTCCAAACTCCTGCACGTCTTTTAAACTTGGTAGCACATGTTATTGTGACGGTACCGTTTCCCGCTGAAATCCGACTTATCTAAGTTGGAATGTCCACGCATCAGCGTGTCAACCAGAAACATGAGACGTTCACAGTAGTGGACTCTCACCGCTCACCTGTCTAATCGCGGGCTCTCTTTCCGTGCGGAGGATAAGGCTAATGATTCTCTTACTCACGTAATGCGACGAAGCGTCTTAGCGAGCGACGCTCTTGTTGTAGAAATTGGGTGGGATTGAGAGGGCATTCGACTCGGATGTTTGCAGACAACGGTCCAAAGGATGCTTTAGCGAATCACGATGTTTTGAAATAATTCGCACTACCTGAATGTACACTATAAGGAAGTCACTGGACTGGCGCCTGATGTATTTAATGGAGATTTCCCCGACTGCGGAACGGTGTTTCGCAGTGGAGTGCTTCTAGGGCTAAGATTGGCCCCGTACTATTTTGAAACAACCCTAAGAAGACATGATTTCCTATGTGTGCTGCCTGAGATGTTAATAAACCGGGAAGGGATGCGGTAAACATGGCCGACGGCACCTTCTCAAGGGCTGCGGGTCTCGATTCAAAAAGGACGTGGACTCAGTGCGGGTACATGCGGGCGGCAGCCAACCTACTACCCCAGCCTTCCGAGCTTCTCGGATCGTCCTGCAAGGGGTCCCACATCCGGCAGGGCGGAGAAGCTGCAAGCCTGTGCACACTTTCCCATGATTTCATAGCGACTTGGACAAGTCAATCCCGAATTCTGTCAGGACTTACCTAATAGCCTTTCCATCCCACCGTTCGAATTCTTTGAATAAAACAGCATGTTGACCGGTTGTTGAGCCGAACGTCCAGTTTTTATTCTCCAAGCCATCACAAAACTCGCAGGGCCAGCCTGGTACATCTTTCAACGAGCTTCACGATCTATCCGTGATTCTATTCCACCCGGGTTACGAATACCGGGATGGGTCGTGCGTCCCACAATAGTCCGCTTCGAGGGGGAGCCGTCCTACAATCACAACGGCCAAGGTCATCCTGGTTCGCCGCGCTCGTACCCCCCTCGGACAATGAATGCACACAGGGAACCCGGGTTGTCTCAGAGCCTCGACATCATCACTCTATGGCCGTGAAATAAAGATTCTGCACAGCCTTCGCTCGGCGTAGTCAACTTACTGTAAACGGGCTTGTGAATGTACCACTCGGAAAACGAGCAATAAAAGGTATTCGCAAGAATGACGTGGAAGATTTACAAAACTCGGGAATGGGTAGGCAGTGTGACGCTGCAGTTAGCAACAATTGGTCTGCACCCCTATGAGGTGGGACGGGGCAACCTAAAGGTGAACGTCAGGTCGTTTCGAGATTGCGTAGATCACAATGCTAAGTCCGGACATGTTGTCACCGCCTATGTTTAGGACCGTCGGATATAGGATCGATGAGCAAGGTGGCTCTCTATGACCCATTCAATAACAATCGCGCCTAGCGTGTGTATGAGAACAATATTCAGCATCGTGATGTGTTATTATCTAAGTACTGGCGACGGCAGCTATGGAGGTCCAGTTTGAGAGGATAAACTTGGTTCAGGCTCCTCTGGAACCTCGCAGCTCCCTCTTTTCGACTGGCGGTGATTCTAAGAAGACGACCCATCGATGCTTTTGGTACACTGCCTCCGTTTTCCCAGGCCAGCGCAGTTAACGATCGGAACGACCCAAAGCGATTAACAAAAACAAAGCAATCGTGGGTCAACACCGCTGGCATAACACGCTTGGGATACTAACGCGGCTGCCCTTTGTTCCTTTACTGTATAAGAGTGTAATATAACCCGATTCGAAACAGGCCAATAGAGACCTGTTTAGGGCTTCATGGACGCGTGGGACGATGAGAAGGCCTGTTCAGCATGACGTAATTGCCCCGCTCCTTCACTAAAGTTTAGAAAGCGGCAGGGACGGTTCAGAAACCGCTAATCCAGACTAAGTTTCTTGGTGAGGGGAGATCCAGCTTCGACCCGAGTTTTTAAAGTGATACACGGGGTTTAGGCGCGCCTAGCCCGTGGGAACCCTATTATAGTGTTCTATGGTATCAAAAAGCTGTGGAACATATATAGCCTCTGGGCTAACCCCCCAATTTTAGTAGTAGTGCTGAAGTCTCGCGCTGTTCACACCAATCCGGAGAAACTCGCAATATTTGATTGACCAATCCCATCATCCATCTTGTTACTGGTGAGACGAATGAAATCTGCTAGCCGGAGAACGCGAGCTCAGGTGTACTGGGCAGTGACTTTAGCCTGTAGGTATTCACACTTTTTACTTATGGAGTATCAGGTCCCGGTGGGCGTCTGGGTGAGTGTTGGCAACATTAAGTGTGAGGGAAGTGTACCCATCCTCGCGAACCATTTGCGCTTGGGGTACATTGTTGATCCGAG";
  const [sequenceName, setSequenceName] = useState("DNASequence1");
  const [sequence, setSequence] = useState(default_sequence);
  const [splits, setSplits] = useState([700,1500,2330,3000,4000,5100,6000,6777]);
  const [scores, setScores] = useState(Array(splits.length).fill(123));
  const [select, setSelect] = useState(-1);
  const [nucleotides, setNucleotides] = useState("");
  //Segment Splits  
  //Calculate segment indices
  let prev = 0;
  const segments = []
  const lengths = [];
  for(let i = 0; i < splits.length; i++){
    const segment = [];
    segment.push(prev+1, splits[i]);
    segments.push(segment);
    lengths.push(splits[i]-prev);
    prev = splits[i];
  }

  //const[segLengths, setSegLengths] = useState(lengths);

  const segmentBoxes = lengths.map((length,idx)=>{
    const styling = {height: `40px`, width: `${length/10}px`, background: select==idx?"#CCCCCC":"#888888", display: "inline-block", boxSizing: "border-box", border: "1px solid #000000"};
    return <div style = {styling} onClick={() => {
      if(select !== idx){
        setSelect(idx);
      }else{
        setSelect(-1);
      }
    }}>{idx+1}</div>
  });

  useEffect(()=>{
    if(nucleotides !==""){
      if(select<0){
        setNucleotides(sequence);
      }else{
        setNucleotides(sequence.substring(select ===0?0:splits[select-1],splits[select]));
      }
    }
  },[select]);

  const handleNameChange = (event) => {
    setSequenceName(event.target.value);
  };

  return(
    <>
      <form>
        <label>
          Sequence Name:
          <input type="text" value={sequenceName} onChange={handleNameChange}/>
        </label>
        <label>
          Sequence:
          <input type="text"/>
        </label>
        <input type="submit" value="Submit"/>
      </form>
      <div style = {{textAlign: "center", width: "100%"}}>
        <div>
          {select<0?`Total Length: ${splits[splits.length-1]}`:`Segment ${select+1}`}
        </div>
        {segmentBoxes}
        <div>
          {select<0?sequenceName:`Nucleotides: (${segments[select][0]}, ${segments[select][1]}), Score: ${scores[select]}, Length: ${lengths[select]}`}
        </div>
        <button onClick = {() =>{
          if(nucleotides === ""){
            if(select<0){
              setNucleotides(sequence);
            }else{
              setNucleotides(sequence.substring(select ===0?0:splits[select-1],splits[select]));
            }
          }else{
            setNucleotides("");
          }
        }}>
          {nucleotides===""?"Show Nucleotides":"Hide Nucleotides"}
        </button>
        <button>
          {"Export Segmentation"}
        </button>
        <p style = {{whiteSpace: "normal", wordBreak: "break-all", width: "80%", marginLeft: "auto", marginRight:"auto"}}>{nucleotides}</p>
      </div>
    </>
  );
}


function App(){
  return (
    <div className="App">
      <Sequence/>
      <Algo/>
      <PyodideComponent />
    </div>
  );
}

export default App;
